<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.celloud.mapper.UserMapper">
	<resultMap id="BaseResultMap" type="com.celloud.model.User">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="username" property="username" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="email" property="email" jdbcType="VARCHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="address" property="address" jdbcType="VARCHAR" />
		<result column="birthday" property="birthday" jdbcType="DATE" />
		<result column="phone" property="phone" jdbcType="VARCHAR" />
		<result column="age" property="age" jdbcType="INTEGER" />
		<result column="height" property="height" jdbcType="DOUBLE" />
		<result column="married" property="married" jdbcType="BIT" />
		<result column="disabled" property="disabled" jdbcType="BIT" />
	</resultMap>
	<sql id="Base_Column_List">
		id, username, password, email, name, address, birthday, phone, age, height, married,
		disabled
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
		select
		<include refid="Base_Column_List" />
		from user
		where id = #{id,jdbcType=BIGINT}
	</select>
	<select id="login" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user
		where
		(username = #{username,jdbcType=VARCHAR} or email = #{username,jdbcType=VARCHAR})
		and password = #{password,jdbcType=VARCHAR}
	</select>
	<select id="findByUsernameOrEmail" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user
		where
		username = #{username,jdbcType=VARCHAR} or email = #{username,jdbcType=VARCHAR}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from user
		where id = #{id,jdbcType=BIGINT}
	</delete>
	<insert id="insert" parameterType="com.celloud.model.User">
		insert into user (id, username, password,
		email, name, address,
		birthday, phone, age,
		height, married, disabled)
		values (#{id,jdbcType=BIGINT}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
		#{email,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR},
		#{birthday,jdbcType=DATE}, #{phone,jdbcType=VARCHAR}, #{age,jdbcType=INTEGER},
		#{height,jdbcType=DOUBLE}, #{married,jdbcType=BIT}, #{disabled,jdbcType=BIT})
	</insert>
	<insert id="insertSelective" parameterType="com.celloud.model.User">
		insert into user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="username != null">
				username,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="email != null">
				email,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="address != null">
				address,
			</if>
			<if test="birthday != null">
				birthday,
			</if>
			<if test="phone != null">
				phone,
			</if>
			<if test="age != null">
				age,
			</if>
			<if test="height != null">
				height,
			</if>
			<if test="married != null">
				married,
			</if>
			<if test="disabled != null">
				disabled,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=BIGINT},
			</if>
			<if test="username != null">
				#{username,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				#{email,jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="address != null">
				#{address,jdbcType=VARCHAR},
			</if>
			<if test="birthday != null">
				#{birthday,jdbcType=DATE},
			</if>
			<if test="phone != null">
				#{phone,jdbcType=VARCHAR},
			</if>
			<if test="age != null">
				#{age,jdbcType=INTEGER},
			</if>
			<if test="height != null">
				#{height,jdbcType=DOUBLE},
			</if>
			<if test="married != null">
				#{married,jdbcType=BIT},
			</if>
			<if test="disabled != null">
				#{disabled,jdbcType=BIT},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.celloud.model.User">
		update user
		<set>
			<if test="username != null">
				username = #{username,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				email = #{email,jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="address != null">
				address = #{address,jdbcType=VARCHAR},
			</if>
			<if test="birthday != null">
				birthday = #{birthday,jdbcType=DATE},
			</if>
			<if test="phone != null">
				phone = #{phone,jdbcType=VARCHAR},
			</if>
			<if test="age != null">
				age = #{age,jdbcType=INTEGER},
			</if>
			<if test="height != null">
				height = #{height,jdbcType=DOUBLE},
			</if>
			<if test="married != null">
				married = #{married,jdbcType=BIT},
			</if>
			<if test="disabled != null">
				disabled = #{disabled,jdbcType=BIT},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.celloud.model.User">
		update user
		set username = #{username,jdbcType=VARCHAR},
		password = #{password,jdbcType=VARCHAR},
		email = #{email,jdbcType=VARCHAR},
		name = #{name,jdbcType=VARCHAR},
		address = #{address,jdbcType=VARCHAR},
		birthday = #{birthday,jdbcType=DATE},
		phone = #{phone,jdbcType=VARCHAR},
		age = #{age,jdbcType=INTEGER},
		height = #{height,jdbcType=DOUBLE},
		married = #{married,jdbcType=BIT},
		disabled = #{disabled,jdbcType=BIT}
		where id = #{id,jdbcType=BIGINT}
	</update>
</mapper>